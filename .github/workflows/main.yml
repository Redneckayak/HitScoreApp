import requests
import json
from datetime import datetime

BASE_URL = "https://statsapi.mlb.com/api/v1"

today = datetime.utcnow().strftime("%Y-%m-%d")
print(f"üìÖ Today: {today}")

# === 1) Get all team IDs ===
teams_url = f"{BASE_URL}/teams?sportId=1"
teams = requests.get(teams_url).json()['teams']
team_ids = [team['id'] for team in teams]

# === 2) Get all active batters ===
batters = []
for team_id in team_ids:
    roster_url = f"{BASE_URL}/teams/{team_id}/roster/active"
    players = requests.get(roster_url).json()['roster']
    for p in players:
        if p['position']['type'] == 'Hitter':
            batters.append({
                'name': p['person']['fullName'],
                'id': p['person']['id'],
                'team_id': team_id
            })

print(f"‚úÖ Found {len(batters)} active hitters.")

# === 3) Get today's schedule & probable SPs ===
sched_url = f"{BASE_URL}/schedule?sportId=1&date={today}"
games = requests.get(sched_url).json()['dates'][0]['games']

# Map team_id to opponent SP id
team_sp_map = {}

for game in games:
    away_id = game['teams']['away']['team']['id']
    home_id = game['teams']['home']['team']['id']

    away_sp = game['teams']['home']['probablePitcher']['id'] if 'probablePitcher' in game['teams']['home'] else None
    home_sp = game['teams']['away']['probablePitcher']['id'] if 'probablePitcher' in game['teams']['away'] else None

    if away_sp:
        team_sp_map[away_id] = away_sp
    if home_sp:
        team_sp_map[home_id] = home_sp

print(f"‚úÖ Mapped SPs for {len(team_sp_map)} teams.")

# === 4) For each batter, pull stats + opponent SP ===
results = []
for b in batters:
    try:
        player_id = b['id']
        team_id = b['team_id']

        # Opponent SP ID
        sp_id = team_sp_map.get(team_id)
        if not sp_id:
            print(f"‚ö†Ô∏è No SP found for {b['name']} (Team ID {team_id}), skipping.")
            continue

        # Season AVG
        season_url = f"{BASE_URL}/people/{player_id}/stats?stats=season&group=hitting"
        season_avg = float(requests.get(season_url).json()['stats'][0]['splits'][0]['stat']['avg'])

        # L5, L10, L20
        log_url = f"{BASE_URL}/people/{player_id}/stats?stats=gameLog&group=hitting"
        splits = requests.get(log_url).json()['stats'][0]['splits']
        if not splits:
            continue

        L5 = sum(int(g['stat']['hits']) for g in splits[:5]) / 5
        L10 = sum(int(g['stat']['hits']) for g in splits[:10]) / 10
        L20 = sum(int(g['stat']['hits']) for g in splits[:20]) / 20

        # SP OBA
        sp_url = f"{BASE_URL}/people/{sp_id}/stats?stats=season&group=pitching"
        sp_oba = float(requests.get(sp_url).json()['stats'][0]['splits'][0]['stat']['avg'])

        # Hit Score
        season_component = season_avg / 0.238
        trend_component = (L5 + L10 + L20) / 26.75
        sp_component = sp_oba / 0.238
        hit_score = season_component + trend_component + sp_component

        results.append({
            "name": b['name'],
            "season_avg": round(season_avg, 3),
            "L5": round(L5, 3),
            "L10": round(L10, 3),
            "L20": round(L20, 3),
            "sp_oba": round(sp_oba, 3),
            "hit_score": round(hit_score, 2)
        })

        print(f"‚úÖ {b['name']}: {round(hit_score, 2)}")

    except Exception as e:
        print(f"‚ùå {b['name']} error: {e}")

# === 5) Save ===
output = {
    "generated_at": datetime.utcnow().isoformat(),
    "players": results
}

with open("hit_scores.json", "w") as f:
    json.dump(output, f, indent=4)

print(f"\nüéâ Done! Hit scores for {len(results)} batters saved to hit_scores.json")
